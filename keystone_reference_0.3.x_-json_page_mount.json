---
permalink: keystone/reference/0.3.x/-json/page/mount.json
---
{
  "action": "simple documentation",
  "command": "page",
  "success": true,
  "message": "Have a great day!",
  "code": 200,
  "title": "Keystone.mount",
  "slug": "mount",
  "page": {
    "_id": "56ceb23fc27737507f93c899",
    "sortBy": 1,
    "currentOrder": 15,
    "order": 15,
    "slug": "mount",
    "updatedBy": "54ce583de345cf3359db79bd",
    "updatedAt": "2016-02-27T07:17:48.274Z",
    "createdBy": "54ce583de345cf3359db79bd",
    "createdAt": "2016-02-25T07:50:23.080Z",
    "key": "mount",
    "title": "Keystone.mount",
    "parent": {
      "_id": "56ce85b72016dcfc71d320fd",
      "order": 2,
      "slug": "keystone",
      "title": "Keystone",
      "parent": "56d194a6020b01635cade433"
    },
    "publish": "published",
    "sortNumber": "15",
    "type": 1,
    "links": [],
    "display": 1,
    "externalLinks": "",
    "markdown": {
      "html": "<h4 id=\"-mount-_mountpath_-_parentapp_-_events_-\">.mount( [<em>mountPath</em>, <em>parentApp</em>, <em>events</em>] )</h4>\n<blockquote>\n<p><em>@param</em> <strong>mountPath</strong> <em>{String}</em>  - <em>Optional</em> Folder to mount Keystone as a sub-app<br><em>@param</em> <strong>parentApp</strong> <em>{Express()}</em>  - <em>Optional</em> Express app<br><em>@param</em> <strong>events</strong> <em>{...Function|Object}</em>  - <em>Optional</em> Object with onMount event or Function to run once mounted<br><em>@return</em> <strong>events.onMount()</strong> </p>\n</blockquote>\n<p>You can use <code>.mount()</code> for custom Express setups.<br><strong>mountPath</strong> is an optional path to mount Keystone under.<br><strong>parentApp</strong> will be your Express app.<br>The <strong>events</strong> parameter can be used to perform commands once Keystone has been mounted.<br>If <strong>events</strong> is a function it will get mapped to <code>{onMount: events}</code>.  </p>\n<pre><code class=\"language-javascript\">/* Mount Keystone as a sub-app */\n\nvar app = express(),\n    keystone = require(&#39;keystone&#39;),\n    server,\n    theEvents = require(&quot;events&quot;).EventEmitter;\n\n/**\n    Keystone supports the following options specifically for running in encapsulated mode (with no embedded server):  \n\n       - name\n       - port\n       - views\n       - view engine\n       - compress\n       - favico\n       - less\n       - static\n       - headless\n       - logger\n       - cookie secret\n       - session\n       - 404\n       - 500\n       - routes\n       - locals\n       - auto update\n       - app\n       - mongoose\n*/\n\nkeystone.init({ \n    app: app,\n});\n\ntheEvents.on(&#39;keystone ready&#39;,function() {\n    var server = app.listen(3000);\n    console.log(&#39;server started&#39;);\n});\n\nkeystone.mount(&#39;/content&#39;, app, {\n    onMount: function() {\n        //put your app&#39;s static content and error handling middleware here and start your server\n       theEvents.emit(&#39;keystone ready&#39;);\n    }\n});\n</code></pre>\n<p><div class=\"code-header addGitHubLink\" data-file=\"lib/core/mount.js\"> <a href=\"#\" class=\"loadCode\"> code</a> </div><pre class=\" language-javascript hideCode api\"></pre> </p>\n",
      "md": "#### .mount( [_mountPath_, _parentApp_, _events_] )\r\n> *@param* **mountPath** _{String}_  - _Optional_ Folder to mount Keystone as a sub-app  \r\n> *@param* **parentApp** _{Express()}_  - _Optional_ Express app  \r\n> *@param* **events** _{...Function|Object}_  - _Optional_ Object with onMount event or Function to run once mounted  \r\n> _@return_ **events.onMount()** \r\n\r\nYou can use `.mount()` for custom Express setups.  \r\n**mountPath** is an optional path to mount Keystone under.  \r\n**parentApp** will be your Express app.  \r\nThe **events** parameter can be used to perform commands once Keystone has been mounted.  \r\nIf **events** is a function it will get mapped to `{onMount: events}`.  \r\n\r\n\r\n\r\n```javascript\r\n/* Mount Keystone as a sub-app */\r\n\r\nvar app = express(),\r\n    keystone = require('keystone'),\r\n    server,\r\n    theEvents = require(\"events\").EventEmitter;\r\n    \r\n/**\r\n\tKeystone supports the following options specifically for running in encapsulated mode (with no embedded server):  \r\n\r\n\t   - name\r\n\t   - port\r\n\t   - views\r\n\t   - view engine\r\n\t   - compress\r\n\t   - favico\r\n\t   - less\r\n\t   - static\r\n\t   - headless\r\n\t   - logger\r\n\t   - cookie secret\r\n\t   - session\r\n\t   - 404\r\n\t   - 500\r\n\t   - routes\r\n\t   - locals\r\n\t   - auto update\r\n\t   - app\r\n\t   - mongoose\r\n*/\r\n\r\nkeystone.init({ \r\n\tapp: app,\r\n});\r\n\r\ntheEvents.on('keystone ready',function() {\r\n\tvar server = app.listen(3000);\r\n\tconsole.log('server started');\r\n});\r\n\r\nkeystone.mount('/content', app, {\r\n    onMount: function() {\r\n    \t//put your app's static content and error handling middleware here and start your server\r\n       theEvents.emit('keystone ready');\r\n    }\r\n});\r\n```\r\n<div class=\"code-header addGitHubLink\" data-file=\"lib/core/mount.js\"> <a href=\"#\" class=\"loadCode\"> code</a> </div><pre class=\" language-javascript hideCode api\"></pre> \r\n\r\n\r\n\r\n"
    },
    "menuTitle": ".mount"
  }
}
