---
permalink: /-json/page/email.json
---
{
  "action": "simple documentation",
  "command": "page",
  "success": true,
  "message": "Have a great day!",
  "code": 200,
  "title": "Keystone.Email Class",
  "slug": "email",
  "page": {
    "_id": "56ce866b2016dcfc71d32101",
    "sortBy": 1,
    "currentOrder": 28,
    "order": 28,
    "slug": "email",
    "updatedBy": "54ce583de345cf3359db79bd",
    "updatedAt": "2016-02-29T03:43:13.052Z",
    "createdBy": "54ce583de345cf3359db79bd",
    "createdAt": "2016-02-25T04:43:23.139Z",
    "key": "keystoneemail-class",
    "title": "Keystone.Email Class",
    "parent": {
      "_id": "56ce85b72016dcfc71d320fd",
      "order": 2,
      "slug": "keystone",
      "title": "Keystone",
      "parent": "56d194a6020b01635cade433"
    },
    "publish": "published",
    "sortNumber": "28",
    "links": [],
    "externalLinks": "",
    "html": "",
    "markdown": {
      "html": "<h4 id=\"new-keystone-email-options-\">new Keystone.Email( options )</h4>\n<blockquote>\n<p><em>@param</em> <strong>options</strong> <em>{...String|Object}</em><br><em>@return</em> <strong>this</strong>     </p>\n</blockquote>\n<p>Once created, emails can be sent with Mandrill, or rendered for viewing.   </p>\n<p class=\"api-note\">Passing a <strong>String</strong> will set <code>templateName</code> and use <a href=\"#email-defaults\"><code>Email.defaults</code></a>.</p>\n<p class=\"caution-note\"> Requires setting Keystone option <code>emails</code>  to render.  <br />Requires setting either <code>options.mandrill</code> or Keystone option <code>mandrill api key</code>  to send.   </p>    \n\n<p><strong> <code>options</code> </strong>:   </p>\n<ul>\n<li><strong>templateName</strong> - The name of the template to render.  Default use should be the name of a jade template file or directory. Required if not using <code>templateMandrillName</code>.   </li>\n<li><strong>templateExt</strong> - The extension name of our template file.  A template must be available at <code>templateName.templateExt</code> or <code>templateName/email.templateExt</code>.  </li>\n<li><strong>templateEngine</strong> - The engine to use to render the email html.  Defaults to <code>require(&#39;jade&#39;)</code>  </li>\n<li><strong>templateBasePath</strong> - Base path to load email template files.   </li>\n<li><strong>templateCompile</strong> - A custom template compiler.    Use in conjunction with <code>templateRender</code>.  <pre><code class=\"lang-javascript\">// example for nunjucks  \noptions.templateCompile: function(engine, contents, opts, path) {\n  return engine.compile(contents, opts, path); //calling compile() on the nunjucks engine, and returning the compiled template\n},\n</code></pre>\n</li>\n<li><strong>templateRender</strong> - A custom renderer function.  Use in conjunction with <code>templateCompile</code>.  <pre><code class=\"lang-javascript\">// example for nunjucks  \noptions.templateRender: function(template, locals) {\n  return template.render(locals); //calling the nunjucks compiled template render()\n},\n</code></pre>\n</li>\n<li><strong>templateMandrillName</strong> - Name of a Mandrill template to use to render emails.    </li>\n<li><strong>templateMandrillContent</strong> - An <strong>Array</strong> of content blocks for a Mandrill template. <pre><code class=\"lang-javascript\">options.templateMandrillContent = [\n  {\n      &quot;name&quot;: &quot;header&quot;,\n      &quot;content&quot;: &quot;&lt;h2&gt;&quot; + keystone.get(&#39;name&#39;) + &quot;&lt;/h2&gt;&quot;\n  }\n]\n</code></pre>\n</li>\n</ul>\n<div class=\"code-header\"> <h4>Create a new Email instance and send an Email</h4></div><pre class=\" language-javascript\"><code class=\"language-javascript\">\n    var Email = new keystone.Email(&#39;welcome&#39;);\n    Email.send({\n        subject:&#39;Your  account information&#39;,\n        tags:&#39;new user&#39;,\n        to:newUser.realEmail,\n        fromName:&#39;Account Team&#39;,\n        fromEmail:&#39;support@domain.tld&#39;,\n        enquiry: {\n            _: require(&#39;lodash&#39;),\n            name:newUser.name.first+&#39;  &#39;+newUser.name.last,\n            email:newUser.realEmail,\n            html:&#39;&#39;\n        }\n    },function(err,info){\n        //console.log(err,&#39;New user email sent&#39;,info);\n    });\n</code></pre>\n\n<div class=\"contextual-note\">\n<h4> Explanation</h4> \n<p>We pass <code>&#39;welcome&#39;</code> as our template name. <br />Since we set <code>keystone.init({ ..., &#39;emails&#39;: &#39;templates/emails&#39;})</code> the class looked in <code>/templates/emails/welcome.jade</code> and <code>/templates/emails/welcome/email.jade</code> for the template to use to render the email.</p>\n</div>  \n\n\n<p><div class=\"code-header addGitHubLink\" data-file=\"lib/email.js#L125-L170\"> <a href=\"#\" class=\"loadCode\"> code</a></div><pre class=\" language-javascript hideCode api\"></pre> </p>\n",
      "md": "#### new Keystone.Email( options )  \r\n> *@param* **options** _{...String|Object}_   \r\n> _@return_ **this**     \r\n\r\nOnce created, emails can be sent with Mandrill, or rendered for viewing.   \r\n\r\n<p class=\"api-note\">Passing a **String** will set `templateName` and use <a href=\"#email-defaults\">`Email.defaults`</a>.</p>\r\n<p class=\"caution-note\"> Requires setting Keystone option `emails`  to render.  <br />Requires setting either `options.mandrill` or Keystone option `mandrill api key`  to send.   </p>    \r\n\r\n** `options` **:   \r\n* **templateName** - The name of the template to render.  Default use should be the name of a jade template file or directory. Required if not using ` templateMandrillName `.   \r\n* **templateExt** - The extension name of our template file.  A template must be available at `templateName.templateExt` or `templateName/email.templateExt`.  \r\n* **templateEngine** - The engine to use to render the email html.  Defaults to ` require('jade') `  \r\n* **templateBasePath** - Base path to load email template files.   \r\n* **templateCompile** - A custom template compiler.    Use in conjunction with ` templateRender `.  \r\n```javascript\r\n// example for nunjucks  \r\noptions.templateCompile: function(engine, contents, opts, path) {\r\n    return engine.compile(contents, opts, path); //calling compile() on the nunjucks engine, and returning the compiled template\r\n},\r\n```\r\n* **templateRender** - A custom renderer function.  Use in conjunction with ` templateCompile `.  \r\n```javascript\r\n// example for nunjucks  \r\noptions.templateRender: function(template, locals) {\r\n    return template.render(locals); //calling the nunjucks compiled template render()\r\n},\r\n```\r\n* **templateMandrillName** - Name of a Mandrill template to use to render emails.    \r\n* **templateMandrillContent** - An **Array** of content blocks for a Mandrill template. \r\n```javascript  \r\noptions.templateMandrillContent = [\r\n    {\r\n        \"name\": \"header\",\r\n        \"content\": \"<h2>\" + keystone.get('name') + \"</h2>\"\r\n    }\r\n]\r\n```   \r\n\r\n<div class=\"code-header\"> <h4>Create a new Email instance and send an Email</h4></div><pre class=\" language-javascript\"><code class=\"language-javascript\">\r\n\tvar Email = new keystone.Email('welcome');\r\n\tEmail.send({\r\n\t\tsubject:'Your  account information',\r\n\t\ttags:'new user',\r\n\t\tto:newUser.realEmail,\r\n\t\tfromName:'Account Team',\r\n\t\tfromEmail:'support@domain.tld',\r\n\t\tenquiry: {\r\n\t\t\t_: require('lodash'),\r\n\t\t\tname:newUser.name.first+'  '+newUser.name.last,\r\n\t\t\temail:newUser.realEmail,\r\n\t\t\thtml:''\r\n\t\t}\r\n\t},function(err,info){\r\n\t\t//console.log(err,'New user email sent',info);\r\n\t});\r\n</code></pre>\r\n\r\n<div class=\"contextual-note\">\r\n<h4> Explanation</h4> \r\n<p>We pass `'welcome'` as our template name. <br />Since we set ` keystone.init({ ..., 'emails': 'templates/emails'}) ` the class looked in ` /templates/emails/welcome.jade ` and ` /templates/emails/welcome/email.jade ` for the template to use to render the email.</p>\r\n</div>  \r\n\r\n\r\n<div class=\"code-header addGitHubLink\" data-file=\"lib/email.js#L125-L170\"> <a href=\"#\" class=\"loadCode\"> code</a></div><pre class=\" language-javascript hideCode api\"></pre> \r\n\r\n"
    },
    "display": 1,
    "menuTitle": "Keystone.Email",
    "type": 1
  }
}
