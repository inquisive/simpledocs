---
permalink: -json/page/field-types-Embedly.json
---
{
  "action": "simple documentation",
  "command": "page",
  "success": true,
  "message": "Have a great day!",
  "code": 200,
  "title": "Keystone.Field.Types.Embedly",
  "slug": "field-types-Embedly",
  "page": {
    "_id": "56d7df5323816ef67d075cbd",
    "title": "Keystone.Field.Types.Embedly",
    "menuTitle": ".Embedly",
    "parent": {
      "_id": "56d3b3697262188f4f6ef23b",
      "order": 30,
      "slug": "keystonefieldtypes",
      "title": "Keystone.Field.Types",
      "parent": "56ce85b72016dcfc71d320fd"
    },
    "slug": "field-types-Embedly",
    "publish": "published",
    "sortNumber": "10",
    "type": 1,
    "links": [],
    "markdown": {
      "md": "#### .Field.Types.Embedly( list, path, options )  \n> *@param* **list** _{Object}_  - valid Keystone list   \n> *@param* **path** _{String}_  - path   \n> *@param* **options** _{Object}_  - options   \n> *@api* **public**  \n\n<p class=\"caution-note\">Requires the option `from` to refer to another path in the schema that provides the url to expand.</p>\n\n<div class=\"code-header\"> <h4>defaults</h4></div><pre class=\" language-javascript\"><code class=\"language-javascript\">\nthis._underscoreMethods = ['reset'];\nthis._fixedSize = 'full';\n\nthis.fromPath = options.from;\nthis.embedlyOptions = options.options || {};\n\n// TODO: implement filtering, usage disabled for now\noptions.nofilter = true;\n\n</code></pre>\n\n<div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js\"> <a href=\"#\" class=\"loadCode\"> code</a></div><pre class=\" language-javascript hideCode api\"></pre>  \n\n---\n<span class=\"subMethod\"> .Field.Types.Embedly.addToSchema(  ) </span>      \n> *@api* **public**    \n\nRegisters the field on the List's Mongoose Schema.    \n<div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L63-L182\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> \n\n---\n\n<span class=\"subMethod\"> .Field.Types.Embedly.reset( item ) </span>  \n> *@param* **item** {Object} - valid item object       \n> *@api* **public**     \n\n<div class=\"code-header\"> <h4>Resets the value of the field</h4></div><pre class=\" language-javascript\"><code class=\"language-javascript\">{\n\texists: false,\n\ttype: null,\n\ttitle: null,\n\turl: null,\n\twidth: null,\n\theight: null,\n\tversion: null,\n\tdescription: null,\n\thtml: null,\n\tauthorName: null,\n\tauthorUrl: null,\n\tproviderName: null,\n\tproviderUrl: null,\n\tthumbnailUrl: null,\n\tthumbnailWidth: null,\n\tthumbnailHeight: null\n}</code></pre>\n\n<div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L185-L210\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> \n\n---\n<span class=\"subMethod\"> .Field.Types.Embedly.format( item ) </span>  \n> *@param* **item** {Object} - valid field object   \n> *@api* **public**     \n\nFormats the field value.\n```javascript\nreturn item.get(this.paths.html);\n```\n<div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L213-L221\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> \n\n---\n<span class=\"subMethod\"> .Field.Types.Embedly.isModified( item ) </span> \n> *@param* **item** {Object} - valid field object   \n> *@api* **public**    \n\nDetects whether the field has been modified.  \n```javascript\n// Assume that it has changed if the url is different\nreturn item.isModified(this.paths.url);\n```\n<div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L224-L233\">&nbsp; </div><pre class=\" language-javascript hideCode api\"></pre>\n\n---\n<span class=\"subMethod\"> .Field.Types.Embedly.validateInput( data )  </span> \n> *@param* **data** {Object} - valid data object  \n> *@api* **public**   \n  \n<p class=\"caution-note\">Embedly fields do not incur validation and will always return `true`. </p>\n\n<div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L236-L245\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> \n\n\n---\n<span class=\"subMethod\"> .Field.Types.Embedly.updateItem( item, data )  </span> \n> *@param* **item** {Object} - valid field object  \n> *@param* **data** {Object} - data to update  \n> *@api* **public**  \n\nUpdates the value for this field in the item from a data object.    \n\n<div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L248-L275\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> \n",
      "html": "<h4 id=\"-field-types-embedly-list-path-options-\">.Field.Types.Embedly( list, path, options )</h4>\n<blockquote>\n<p><em>@param</em> <strong>list</strong> <em>{Object}</em>  - valid Keystone list<br><em>@param</em> <strong>path</strong> <em>{String}</em>  - path<br><em>@param</em> <strong>options</strong> <em>{Object}</em>  - options<br><em>@api</em> <strong>public</strong>  </p>\n</blockquote>\n<p class=\"caution-note\">Requires the option <code>from</code> to refer to another path in the schema that provides the url to expand.</p>\n\n<p><div class=\"code-header\"> <h4>defaults</h4></div><pre class=\" language-javascript\"><code class=\"language-javascript\">\nthis._underscoreMethods = [&#39;reset&#39;];\nthis._fixedSize = &#39;full&#39;;</p>\n<p>this.fromPath = options.from;\nthis.embedlyOptions = options.options || {};</p>\n<p>// TODO: implement filtering, usage disabled for now\noptions.nofilter = true;</p>\n<p></code></pre></p>\n<p><div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js\"> <a href=\"#\" class=\"loadCode\"> code</a></div><pre class=\" language-javascript hideCode api\"></pre>  </p>\n<hr>\n<p><span class=\"subMethod\"> .Field.Types.Embedly.addToSchema(  ) </span>      </p>\n<blockquote>\n<p><em>@api</em> <strong>public</strong>    </p>\n</blockquote>\n<p>Registers the field on the List&#39;s Mongoose Schema.    </p>\n<p><div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L63-L182\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> </p>\n<hr>\n<p><span class=\"subMethod\"> .Field.Types.Embedly.reset( item ) </span>  </p>\n<blockquote>\n<p><em>@param</em> <strong>item</strong> {Object} - valid item object<br><em>@api</em> <strong>public</strong>     </p>\n</blockquote>\n<p><div class=\"code-header\"> <h4>Resets the value of the field</h4></div><pre class=\" language-javascript\"><code class=\"language-javascript\">{\n    exists: false,\n    type: null,\n    title: null,\n    url: null,\n    width: null,\n    height: null,\n    version: null,\n    description: null,\n    html: null,\n    authorName: null,\n    authorUrl: null,\n    providerName: null,\n    providerUrl: null,\n    thumbnailUrl: null,\n    thumbnailWidth: null,\n    thumbnailHeight: null\n}</code></pre></p>\n<p><div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L185-L210\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> </p>\n<hr>\n<p><span class=\"subMethod\"> .Field.Types.Embedly.format( item ) </span>  </p>\n<blockquote>\n<p><em>@param</em> <strong>item</strong> {Object} - valid field object<br><em>@api</em> <strong>public</strong>     </p>\n</blockquote>\n<p>Formats the field value.</p>\n<pre><code class=\"language-javascript\">return item.get(this.paths.html);\n</code></pre>\n<p><div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L213-L221\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> </p>\n<hr>\n<p><span class=\"subMethod\"> .Field.Types.Embedly.isModified( item ) </span> </p>\n<blockquote>\n<p><em>@param</em> <strong>item</strong> {Object} - valid field object<br><em>@api</em> <strong>public</strong>    </p>\n</blockquote>\n<p>Detects whether the field has been modified.  </p>\n<pre><code class=\"language-javascript\">// Assume that it has changed if the url is different\nreturn item.isModified(this.paths.url);\n</code></pre>\n<p><div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L224-L233\">&nbsp; </div><pre class=\" language-javascript hideCode api\"></pre></p>\n<hr>\n<p><span class=\"subMethod\"> .Field.Types.Embedly.validateInput( data )  </span> </p>\n<blockquote>\n<p><em>@param</em> <strong>data</strong> {Object} - valid data object<br><em>@api</em> <strong>public</strong>   </p>\n</blockquote>\n<p class=\"caution-note\">Embedly fields do not incur validation and will always return <code>true</code>. </p>\n\n<p><div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L236-L245\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> </p>\n<hr>\n<p><span class=\"subMethod\"> .Field.Types.Embedly.updateItem( item, data )  </span> </p>\n<blockquote>\n<p><em>@param</em> <strong>item</strong> {Object} - valid field object<br><em>@param</em> <strong>data</strong> {Object} - data to update<br><em>@api</em> <strong>public</strong>  </p>\n</blockquote>\n<p>Updates the value for this field in the item from a data object.    </p>\n<p><div class=\"code-header addGitHubLink\" data-file=\"fields/types/embedly/EmbedlyType.js#L248-L275\"> &nbsp;</div><pre class=\" language-javascript hideCode api\"></pre> </p>\n"
    },
    "display": 1,
    "currentOrder": 10,
    "order": 10
  }
}
