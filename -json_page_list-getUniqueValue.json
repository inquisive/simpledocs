---
permalink: -json/page/list-getUniqueValue.json
---
{
  "action": "simple documentation",
  "command": "page",
  "success": true,
  "message": "Have a great day!",
  "code": 200,
  "title": "Keystone.List.getUniqueValue",
  "slug": "list-getUniqueValue",
  "page": {
    "_id": "56d7dd389c22d3957d0f96c2",
    "title": "Keystone.List.getUniqueValue",
    "menuTitle": ".getUniqueValue",
    "parent": {
      "_id": "56d7d408dc8aef5a45e620ea",
      "order": 31,
      "slug": "keystone-list",
      "title": "Keystone.List Class",
      "parent": "56ce85b72016dcfc71d320fd"
    },
    "slug": "list-getUniqueValue",
    "publish": "published",
    "sortNumber": "append",
    "type": 1,
    "links": [],
    "markdown": {
      "md": "#### List.getUniqueValue( path, generator [, _limit_ ], callback )   \n> _@param_ **path** {String} - path to check for uniqueness  \n> _@param_ **generator** {Function} - generator method to call to generate a new value  \n> _@param_ **limit** {Number} - the maximum number of attempts (optional, defaults to 10)  \n> _@param_ **callback** {Function} - callback(err, uniqueValue)  \n> _@api_ **private**  \n\nGets a unique value from a generator method by checking for documents with the same value.  \n\nTo avoid infinite loops when a unique value cannot be found, it will bail and pass back an undefined value after 10 attempts.  \n\n<p class=\"warning-note\">Because there will always be a small amount of time between checking for an existing value and saving a document, race conditions can occur and it is possible that another document has the 'unique' value assigned at the same time. <br /> <br /> If true uniqueness is required, you should also create a unique index on the database path, and handle duplicate errors thrown on save. </p>  \n\n \n\n \n<div class=\"code-header addGitHubLink\" data-file=\"lib/list/getUniqueValue.js\"><a href=\"#\" class=\"loadCode\"> code</a></div><pre class=\" language-javascript hideCode api\"></pre> \n",
      "html": "<h4 id=\"list-getuniquevalue-path-generator-_limit_-callback-\">List.getUniqueValue( path, generator [, <em>limit</em> ], callback )</h4>\n<blockquote>\n<p><em>@param</em> <strong>path</strong> {String} - path to check for uniqueness<br><em>@param</em> <strong>generator</strong> {Function} - generator method to call to generate a new value<br><em>@param</em> <strong>limit</strong> {Number} - the maximum number of attempts (optional, defaults to 10)<br><em>@param</em> <strong>callback</strong> {Function} - callback(err, uniqueValue)<br><em>@api</em> <strong>private</strong>  </p>\n</blockquote>\n<p>Gets a unique value from a generator method by checking for documents with the same value.  </p>\n<p>To avoid infinite loops when a unique value cannot be found, it will bail and pass back an undefined value after 10 attempts.  </p>\n<p class=\"warning-note\">Because there will always be a small amount of time between checking for an existing value and saving a document, race conditions can occur and it is possible that another document has the &#39;unique&#39; value assigned at the same time. <br /> <br /> If true uniqueness is required, you should also create a unique index on the database path, and handle duplicate errors thrown on save. </p>  \n\n\n\n\n<p><div class=\"code-header addGitHubLink\" data-file=\"lib/list/getUniqueValue.js\"><a href=\"#\" class=\"loadCode\"> code</a></div><pre class=\" language-javascript hideCode api\"></pre> </p>\n"
    },
    "display": 1
  }
}
